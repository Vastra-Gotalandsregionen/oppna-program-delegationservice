/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package se.vgregion.delegation.ws;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebService;

import riv.authorization.delegation.delegationservice._1.rivtabp21.DelegationServiceResponderInterface;
import se.riv.authorization.delegation.delegationserviceresponder.v1.Delegations;
import se.riv.authorization.delegation.delegationserviceresponder.v1.ForToRoleType;
import se.vgregion.delegation.DelegationService;
import se.vgregion.delegation.domain.Delegation;
import se.vgregion.delegation.domain.DelegationBlock;
import se.vgregion.delegation.util.DelegationUtil;

/**
 * This class was generated by Apache CXF 2.2.2 Wed Apr 18 14:42:43 CEST 2012 Generated source version: 2.2.2
 * 
 */

@WebService(serviceName = "DelegationServiceResponderService", endpointInterface = "riv.authorization.delegation.delegationservice._1.rivtabp21.DelegationServiceResponderInterface", portName = "DelegationServiceResponderPort", targetNamespace = "urn:riv:authorization:delegation:DelegationService:1:rivtabp21", wsdlLocation = "schemas/interactions/DelegationService/DelegationService_1.0_RIVTABP21.wsdl")
public class DelegationServiceResponderInterfaceImpl implements DelegationServiceResponderInterface {

    DelegationService delegationService;

    public DelegationServiceResponderInterfaceImpl() {
        super();
    }

    public DelegationServiceResponderInterfaceImpl(DelegationService delegationService) {
        super();
        this.delegationService = delegationService;
    }

    private static final Logger LOG = Logger.getLogger(DelegationServiceResponderInterfaceImpl.class.getName());

    /* public SaveDelegationsResponseType saveDelegations(String logicalAddress, DelegationBlock parameters) { //
     * TODO Auto-generated method stub return null; } */

    @Override
    public Delegations saveDelegations(String logicalAddress,
            se.riv.authorization.delegation.delegationserviceresponder.v1.DelegationBlock delegationBlock) {

        DelegationBlock myDelegationBlock = DelegationBlock.toDelegationBlock(delegationBlock);

        // Save, convert the result and return it.
        Delegations result = new Delegations();
        result.getContent().addAll(
                DelegationUtil.convert(delegationService.save(myDelegationBlock).getDelegations(),
                        se.riv.authorization.delegation.delegationserviceresponder.v1.Delegation.class));

        return result;
    }

    @Override
    public Delegations getDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getDelegations - delegatedFor = " + delegatedFor);
        List<Delegation> delegations = delegationService.getDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    @Override
    public Delegations getActiveDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getActiveDelegations - parameters= " + delegatedFor);
        List<Delegation> delegations = delegationService.getActiveDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    @Override
    public Delegations getDelegation(String logicalAddress, String delegationKey) {
        System.out.println("getActiveDelegations - delegationKey = " + delegationKey);
        Delegation delegation = delegationService.findByDelegationKey(Long.parseLong(delegationKey));
        List<Delegation> delegations = new ArrayList<Delegation>();
        delegations.add(delegation);
        return parseDelegations(delegations);

    }

    @Override
    public Delegations getInactiveDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getInactiveDelegations - parameters= " + delegatedFor);
        List<Delegation> delegations = delegationService.getInActiveDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    private se.riv.authorization.delegation.delegationserviceresponder.v1.Delegation convertDelegation(
            Delegation delegation) {
        return DelegationUtil.convert(delegation,
                se.riv.authorization.delegation.delegationserviceresponder.v1.Delegation.class);
    }

    @Override
    public boolean hasDelegation(String logicalAddress, ForToRoleType ftrt) {
        System.out.println("getActiveDelegations - parameters= " + ftrt);
        boolean hasDelegation = delegationService.hasDelegations(ftrt.getDelegatedFor(), ftrt.getDelegatedTo(),
                ftrt.getRole());
        return hasDelegation;
    }

    @Override
    public Delegations getDelegationsByRole(String logicalAddress, ForToRoleType ftrt) {
        List<Delegation> delegations = delegationService.getDelegationsForToRole(ftrt.getDelegatedFor(),
                ftrt.getDelegatedTo(), ftrt.getRole());
        return parseDelegations(delegations);
    }

    private Delegations parseDelegations(List<Delegation> delegations) {
        System.out.println("getDelegations - delegations.size() = " + delegations.size());

        Delegations delegationsReturn = new Delegations();
        List<se.riv.authorization.delegation.delegationserviceresponder.v1.Delegation> delegationsList = delegationsReturn
                .getContent();

        for (Delegation delegation : delegations) {
            delegationsList.add(convertDelegation(delegation));
        }
        return delegationsReturn;
    }
}
