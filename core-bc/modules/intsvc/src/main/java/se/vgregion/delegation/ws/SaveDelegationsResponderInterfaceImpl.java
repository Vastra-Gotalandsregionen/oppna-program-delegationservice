/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package se.vgregion.delegation.ws;

import javax.jws.WebService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import se.riv.authorization.delegation.savedelegations.v1.rivtabp21.SaveDelegationsResponderInterface;
import se.riv.authorization.delegation.savedelegationsresponder.v1.ResultCodeEnum;
import se.riv.authorization.delegation.savedelegationsresponder.v1.SaveDelegationsResponseType;
import se.riv.authorization.delegation.savedelegationsresponder.v1.SaveDelegationsType;
import se.vgregion.delegation.DelegationService;
import se.vgregion.delegation.domain.DelegationBlock;
import se.vgregion.delegation.util.DelegationUtil;
import se.vgregion.delegation.ws.util.DelegationServiceUtil;
import se.vgregion.ticket.TicketException;
import se.vgregion.ticket.TicketManager;
import se.vgregion.web.dto.TicketDto;

/**
 * This class was generated by Apache CXF 2.2.2 Wed Apr 18 14:42:43 CEST 2012 Generated source version: 2.2.2
 * 
 */

@WebService(
        serviceName = "SaveDelegationsResponderService",
        endpointInterface = "se.riv.authorization.delegation.savedelegations.v1.rivtabp21.SaveDelegationsResponderInterface",
        portName = "SaveDelegationsResponderPort",
        targetNamespace = "urn:riv:authorization:delegation:SaveDelegations:1:rivtabp21",
        wsdlLocation = "schemas/interactions/SaveDelegationsInteraction/SaveDelegationsInteraction_1.0_RIVTABP21.wsdl")
public class SaveDelegationsResponderInterfaceImpl implements SaveDelegationsResponderInterface {

    DelegationService delegationService;
    TicketManager ticketManager;

    public SaveDelegationsResponderInterfaceImpl() {
        super();
    }

    public SaveDelegationsResponderInterfaceImpl(DelegationService delegationService,
            TicketManager ticketManager) {
        super();
        this.delegationService = delegationService;
        this.ticketManager = ticketManager;
    }

    static private final Logger logger = LoggerFactory.getLogger(SaveDelegationsResponderInterfaceImpl.class);

    @Override
    public SaveDelegationsResponseType saveDelegations(String logicalAddress, SaveDelegationsType parameters) {

        SaveDelegationsResponseType result = new SaveDelegationsResponseType();

        String ticket = parameters.getTicket();

        TicketDto ticketDTO = new TicketDto(ticket);

        logger.error("ticket = " + ticket);

        try {
            if (ticketManager.verifyTicket(ticketDTO.toTicket())) {
                DelegationBlock block = DelegationUtil.toDelegationBlock(parameters.getDelegationBlockType());
                DelegationBlock savedBlock = delegationService.save(block);
                result.setDelegations(DelegationServiceUtil.parseDelegations(savedBlock.getDelegations()));
            } else {
                logger.warn("invalid ticket");
                result.setResultCode(ResultCodeEnum.ERROR);
                result.setComment("Invalid ticket!");
            }
        } catch (TicketException e) {
            logger.error("Ticket error: " + e.getStackTrace());
        }

        return result;

    }

}
