/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package se.vgregion.delegation.ws;

import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebService;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import se.riv.authorization.delegation.savedelegations.v1.rivtabp21.SaveDelegationsResponderInterface;
import se.riv.authorization.delegation.savedelegationsresponder.v1.Delegations;
import se.vgregion.delegation.DelegationService;
import se.vgregion.delegation.domain.Delegation;
import se.vgregion.delegation.domain.DelegationBlock;

/**
 * This class was generated by Apache CXF 2.2.2 Wed Apr 18 14:42:43 CEST 2012 Generated source version: 2.2.2
 * 
 */

@WebService(serviceName = "SaveDelegationsResponderService", endpointInterface = "se.riv.authorization.delegation.savedelegations.v1.rivtabp21.SaveDelegationsResponderInterface", portName = "SaveDelegationsResponderPort", targetNamespace = "urn:riv:authorization:delegation:SaveDelegations:1:rivtabp21", wsdlLocation = "schemas/interactions/SaveDelegationsInteraction/SaveDelegationsInteraction_1.0_RIVTABP21.wsdl")
public class SaveDelegationsResponderInterfaceImpl implements SaveDelegationsResponderInterface {

    DelegationService delegationService;

    public SaveDelegationsResponderInterfaceImpl() {
        super();
    }

    public SaveDelegationsResponderInterfaceImpl(DelegationService delegationService) {
        super();
        this.delegationService = delegationService;
    }

    private static final Logger LOG = Logger.getLogger(SaveDelegationsResponderInterfaceImpl.class.getName());

    /*
     * public SaveDelegationsResponseType saveDelegations(String logicalAddress, DelegationBlock parameters) { //
     * TODO Auto-generated method stub return null; }
     */

    @Override
    public Delegations saveDelegations(String logicalAddress,
            se.riv.authorization.delegation.savedelegationsresponder.v1.DelegationBlock delegationBlock) {

        DelegationBlock myDelegationBlock = DelegationBlock.toDelegationBlock(delegationBlock);

        // Save, convert the result and return it.
        Delegations result = new Delegations();
        result.getContent().addAll(
                Delegation.convert(delegationService.save(myDelegationBlock).getDelegations(),
                        se.riv.authorization.delegation.savedelegationsresponder.v1.Delegation.class));

        return result;
    }

    @Override
    public Delegations getDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getDelegations - delegatedFor = " + delegatedFor);
        List<Delegation> delegations = delegationService.getDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    @Override
    public Delegations getActiveDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getActiveDelegations - parameters= " + delegatedFor);
        List<Delegation> delegations = delegationService.getActiveDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    @Override
    public Delegations getDelegation(String logicalAddress, String delegationKey) {
        System.out.println("getActiveDelegations - delegationKey = " + delegationKey);
        Delegation delegations = delegationService.getDelegation(Long.getLong(delegationKey));
        // return parseDelegations(delegations);
        return null;
    }

    @Override
    public Delegations getDelegationsByUnitAndRole(String logicalAddress, String parameters) {
        System.out.println("getDelegationsByUnitAndRole - parameters= " + parameters);

        // TODO
        return null;
    }

    @Override
    public Delegations getInactiveDelegations(String logicalAddress, String delegatedFor) {
        System.out.println("getInactiveDelegations - parameters= " + delegatedFor);
        List<Delegation> delegations = delegationService.getInActiveDelegations(delegatedFor);
        return parseDelegations(delegations);
    }

    @Override
    public Delegations hasDelegation(String logicalAddress, String delegatedFor) {
        System.out.println("getActiveDelegations - parameters= " + delegatedFor);
        boolean hasDelegation = delegationService.hasDelegations(delegatedFor, "", "");

        // TODO
        return null;
    }

    private se.riv.authorization.delegation.savedelegationsresponder.v1.Delegation convertDelegation(
            Delegation delegation) {

        se.riv.authorization.delegation.savedelegationsresponder.v1.Delegation delegationReturn =
                new se.riv.authorization.delegation.savedelegationsresponder.v1.Delegation();

        delegationReturn.setDelegatedFor(delegation.getDelegatedFor());
        delegationReturn.setDelegateTo(delegation.getDelegateTo());
        delegationReturn.setDelegationKey(delegation.getDelegationKey());
        delegationReturn.setRole(delegation.getRole());

        try {
            GregorianCalendar validFromCal = new GregorianCalendar();
            validFromCal.setTime(delegation.getValidFrom());
            XMLGregorianCalendar validFromDate;
            validFromDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(validFromCal);
            GregorianCalendar validToCal = new GregorianCalendar();
            validToCal.setTime(delegation.getValidFrom());
            XMLGregorianCalendar validToDate =
                    DatatypeFactory.newInstance().newXMLGregorianCalendar(validToCal);
            delegationReturn.setValidFrom(validFromDate);
            delegationReturn.setValidTo(validToDate);
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
        }

        return delegationReturn;
    }

    private Delegations parseDelegations(List<Delegation> delegations) {
        System.out.println("getDelegations - delegations.size() = " + delegations.size());

        Delegations delegationsReturn = new Delegations();
        List<se.riv.authorization.delegation.savedelegationsresponder.v1.Delegation> delegationsList =
                delegationsReturn.getContent();

        for (Delegation delegation : delegations) {
            delegationsList.add(convertDelegation(delegation));
        }
        return delegationsReturn;
    }
}
